def battle():
    
    power = {
    'Fireball': 50, 
    'Lightning bolt': 40, 
    'Magic arrow': 10, 
    'Black Tentacles': 25, 
    'Contagion': 45
    }
    
    gandalf = ['Fireball', 'Lightning bolt', 'Lightning bolt', 
               'Magic arrow', 'Fireball', 'Magic arrow', 
               'Lightning bolt', 'Fireball', 'Fireball', 'Fireball']
    saruman = ['Contagion', 'Contagion', 'Black Tentacles', 'Fireball',
               'Black Tentacles', 'Lightning bolt', 'Magic arrow',
               'Contagion', 'Magic arrow', 'Magic arrow']
    
    # We start defining a couple of variables to store the number of
    # CONSECUTIVE wins by each sorcerer
    gandalf_wins = 0
    saruman_wins = 0

    # Now we need to keep checking each combat solution. As
    # we know in advance how many times they will fight, we're going
    # to use a "FOR" loop. 
    # In this case we are using "i" as a "dummy" variable that it 
    # will take all the values generated by "range()" one by one.
    # The function "range()" takes one integer number as argument
    # and returns a list with as many integer values as given by
    # the argument starting from 0. Thus, "range(3)" will return
    # [0,1,2].
    # We need to go trough all the elements stored in any of
    # Gandalf's or Saruman's list ( it doesn't matter which
    # list we use because both lists have the same length)
    # In order to get how many elements contains a list, we can use
    # the function "len(list)" replacing "list" by the name of our
    # list. 
    # Thus "len(gandalf)" returns how many elements has the "gandalf"
    # list. Then "range(len(gandalf))"  will return a list with
    # [0,1,2,3,...].
    # Finally the dummy variable "i" will take each of those values
    # stored in [0,1,2,3,...]. We will use those integers in order
    # to access each of the elements stored in "gandalf" list, ie:
    # gandalf[0], gandalf[1], gandalf[2],...
    for i in range(len(gandalf)):
        # We need to use the dictionary to retrieve the power of 
        # each spell using the names stored in the lists.
        # In other words, gandalf[0] will give us the name of the first
        # clash, not the power, which is what we want.
        # The power of the clash is stored in the dictionary "power" and
        # we access each element using the name, ie: 
        # power['Magic arrow'] that will give us 10.
        # Finally we can combine the dictionary and the list in the 
        # following way to get what we want: 
        # power[gandalf[0]] 
        # where we can replace the "0" by any index value.
        if ( power[gandalf[i]] > power[saruman[i]] ):
            # Gandalf wins, therefore we increase the Gandalf's number
            # of wins.
            gandalf_wins += 1
            # As we only care about CONSECUTIVE WINS, we need to reset
            # the "saruman_wins" to zero. In this way, this variable it
            # only records CONSECUTIVE WINS
            saruman_wins = 0
            
        elif ( power[gandalf[i]] < power[saruman[i]] ):
            # Now Saruman wins, we increare it's number of wins.
            saruman_wins += 1
            # As we only care about CONSECUTIVE WINS, we need to reset
            # the "gandalf_wins" to zero. In this way, this variable it
            # only records CONSECUTIVE WINS
            gandalf_wins = 0
            
        else:
            # Nowbody wins, this is a tie! Then we need to reset 
            # both sorcerers variables.
            gandalf_wins = 0
            saruman_wins = 0
        
        # We need to check for three consecutive wins as if this happens
        # the tournament has finished we need to exist the FOR loop
        if ( ( gandalf_wins == 3 ) or ( saruman_wins == 3 ) ):
            break

    # We check if Gandalf won three times in a row.        
    if ( gandalf_wins == 3 ):
        return "Gandalf"
    
    # We check if Gandalf won three times in a row.  
    elif ( saruman_wins == 3 ):
        return "Saruman"
    
    # If none of the previous conditions was True it was a tie.
    else:
        return "Tie"
    return 'Gandalf'
  
def avg_spells():
    
    power = {
    'Fireball': 50, 
    'Lightning bolt': 40, 
    'Magic arrow': 10, 
    'Black Tentacles': 25, 
    'Contagion': 45
    }
    
    gandalf = ['Fireball', 'Lightning bolt', 'Lightning bolt', 
               'Magic arrow', 'Fireball', 'Magic arrow', 
               'Lightning bolt', 'Fireball', 'Fireball', 'Fireball']
    saruman = ['Contagion', 'Contagion', 'Black Tentacles', 'Fireball',
               'Black Tentacles', 'Lightning bolt', 'Magic arrow',
               'Contagion', 'Magic arrow', 'Magic arrow']
    
    # We import numpy library
    import numpy as np

    # We create a list to store directly the value of the scores of each
    # clash.
    scores = []

    # As we know how many elements we want to store in the list, we're
    # going to use a "FOR" loop.
    for i in range(len(gandalf)):
        scores.append(power[gandalf[i]])

    # We finally compute the mean    
    average = np.mean(scores)
    # We round to one decimal.
    average = round(average,1)
    return average

def stdev_spells():
    
    import numpy as np
    
    power = {
    'Fireball': 50, 
    'Lightning bolt': 40, 
    'Magic arrow': 10, 
    'Black Tentacles': 25, 
    'Contagion': 45
    }
    
    gandalf = ['Fireball', 'Lightning bolt', 'Lightning bolt', 
               'Magic arrow', 'Fireball', 'Magic arrow', 
               'Lightning bolt', 'Fireball', 'Fireball', 'Fireball']
    saruman = ['Contagion', 'Contagion', 'Black Tentacles', 'Fireball',
               'Black Tentacles', 'Lightning bolt', 'Magic arrow',
               'Contagion', 'Magic arrow', 'Magic arrow']
    
    # We create a list to store directly the value of the scores of each
    # class.
    scores = []

    # As we know how many elements we want to store in the list, we're
    # going to use a "FOR" loop.
    for i in range(len(gandalf)):
        scores.append(power[gandalf[i]])
    
    # We finally compute the standard deviation
    std = np.std(scores)
    # we tound to one decimal
    std = round(std,1)
    return std
